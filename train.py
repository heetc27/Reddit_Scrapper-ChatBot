# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F_27IiTdkyCMp4ZPGDCp2HNiAvEFcPQX
"""

# libraries
import random
from keras.optimizers import SGD
from keras.layers import Dense, Dropout
from keras.models import load_model
from keras.models import Sequential
import numpy as np
import pickle
import json
import nltk
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
nltk.download('omw-1.4')
nltk.download("punkt")
nltk.download("wordnet")

# init file
data_file = open("intents.json").read()
words,classes,documents,ignore_words = [],[],[],[]
ignore_words.append("?")
ignore_words.append("!")
intents = json.loads(data_file)

# words
for i in intents["intents"]:
    for j in i["patterns"]:
        # take each word and tokenize it
        w = nltk.word_tokenize(j)
        words.extend(w)
        # adding documents
        m=(w, i["tag"])
        documents.append(m)

        # adding classes to our class list
        if i["tag"] in classes:
          pass
        else:
            classes.append(i["tag"])

# lemmatizer
for w in words:
  if w not in ignore_words:
    a=words.index(w)
    words[a]=lemmatizer.lemmatize(w.lower())
words,classes= sorted(list(set(words))),sorted(list(set(classes)))

print(len(documents), "documents")
print(len(classes), "classes", classes)
print(len(words), "unique lemmatized words", words)
json.dump(words, open("tokens.json", "wb"))
json.dump(classes, open("divisions.json", "wb"))

# initializing training data
training = []
output_empty = [0 for i in range(len(classes))]
for doc in documents:
    # initializing bag of words
    bag = []
    # list of tokenized words for the pattern
    pattern_words = doc[0]
    # lemmatize each word - create base word, in attempt to represent related words
    for word in pattern_words:
      b=pattern_words.index(word)
      pattern_words[b]=lemmatizer.lemmatize(word.lower())
    # create our bag of words array with 1, if word match found in current pattern
    for w in words:
      if w in pattern_words:
        bag.append(1)
      else:
        bag.append(0)

    # output is a '0' for each tag and '1' for current tag (for each pattern)
    output_row = list(output_empty)
    output_row[classes.index(doc[1])] = 1
    training.append([bag, output_row])
# shuffle our features and turn into np.array
random.shuffle(training)
training = np.array(training)
# create train and test lists. X - patterns, Y - intents
train_x,train_y = list(training[:, 0]),list(training[:, 1])
print("Training data created")

q,w,e=0.5,len(train_x[0]),len(train_y[0])
# actual training
model = Sequential()
model.add(Dense(128, input_shape=(w,), activation="relu"))
model.add(Dropout(q))
model.add(Dense(64, activation="relu"))
model.add(Dropout(q))
model.add(Dense(e), activation="softmax"))
model.summary()

sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss="categorical_crossentropy", optimizer=sgd, metrics=["accuracy"])

c=np.array(train_x)
d=np.array(train_y)
hist = model.fit(c,d, epochs=200, batch_size=5, verbose=1)
model.save("chatbot_model.h5", hist)
print("model created")